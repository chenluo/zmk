/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>


#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/* Uncomment this block if using an encoder */
//&encoder {
//    status = "okay";
//};

&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
    quick-tap-ms = <50>;
};

// &mt {
//     tapping-term-ms = <200>;
//     flavor = "balanced";
//     quick-tap-ms = <50>;
// };

&soft_off {
    hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp SEMI>, <&kp COLON>;
        };
    td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp SQT>, <&kp DQT>;
        };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <10>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_sft_tab {
            timeout-ms = <10>;
            key-positions = <1 2>;
            bindings = <&kp LS(TAB)>;
        };
        combo_tab {
            timeout-ms = <10>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC   &kp Q    &kp W    &kp E  &kp R     &kp T  &kp Y   &kp U   &kp I     &kp O    &kp P     &kp BSPC
                &kp LCTRL &kp A    &kp S    &kp D  &lt 2 F   &kp G  &kp H   &kp J   &kp K     &kp L    &kp RET
                &kp LSHFT &kp Z    &kp X    &kp C  &kp V     &kp B  &kp N   &kp M   &kp COMMA &kp DOT  &kp SLASH
                         &kp LGUI &kp LALT    &mo 1     &kp SPACE         &kp RALT  &kp RGUI
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_1 {
            bindings = <
                &kp ESC   &kp N1    &kp N2   &kp N3  &kp N4    &kp N5    &kp N6     &kp N7    &kp N8    &kp N9   &kp N0    &kp DEL
                &kp LCTRL &kp A     &kp TAB  &kp ESC &kp PG_DN &kp GRAVE &kp BSPC   &none     &td0      &td1     &none
                &kp LSHFT &kp LEFT  &kp DOWN &kp UP  &kp RIGHT &kp PG_UP &kp MINUS  &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH
                         &trans   &trans   &kp SPACE    &kp LSHFT        &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
                &kp ESC   &kp F1       &kp F2    &kp F3    &kp F4 &kp F5 &kp F6       &kp F7         &kp F8       &kp F9          &kp F10   &trans
                &kp LCTRL &kp LC(A)    &mkp LCLK &mkp RCLK &trans &trans &trans       &trans         &trans       &kp F11         &kp F12
                &kp LSHFT &trans       &trans    &trans    &trans &trans &trans       &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT
                             &trans    &trans    &mo 3  &trans   &trans    &trans
            >;
        };

        layer_3 {
            bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans    &trans    &trans     &studio_unlock    &trans    &trans   &out OUT_BLE &out OUT_USB
                &bt BT_CLR    &trans        &trans        &trans    &trans    &trans    &trans     &trans            &trans    &trans   &trans
                &sys_reset    &trans        &trans        &trans    &trans    &trans    &trans     &trans            &trans    &trans   &trans
                                            &bootloader   &trans    &trans    &trans     &trans            &trans
            >;
        };
    };
};
